---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import TemplateDownloadButton from '../../components/templates/TemplateDownloadButton.tsx';
import { getDatabase, type Template } from '../../lib/database';
import type { Env } from '../../lib/database';

// Get database service (with fallback for build)
const database = getDatabase((Astro.locals as any)?.runtime?.env as Env);

// Fetch templates from database (with fallback for build)
let templates: Template[] = [];
// let error = null;

try {
  templates = await database.getTemplates();
} catch (e) {
  console.log('Templates fetch failed (build mode):', e.message);
  // Fallback data for build process
  templates = [];
}

// Group templates by category for filtering
const categories = [...new Set(templates.map((t) => t.category))];
const materials = [...new Set(templates.flatMap((t) => {
  try {
    return typeof t.materials === 'string' ? JSON.parse(t.materials) : [];
  } catch {
    return [];
  }
}))];
---

<Layout title="Templates - CutGlueBuild.com" description="Browse our collection of laser-cut and Cricut-ready SVG templates. Perfect for makers and creators.">
  <Header />
  
  <main class="pt-20 min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <!-- Hero Section -->
      <div class="text-center mb-12">
        <h1 class="text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6">
          Premium
          <span class="bg-gradient-to-r from-primary-500 to-secondary-500 bg-clip-text text-transparent">
            Templates
          </span>
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
          Professional-grade SVG templates ready for your laser cutter, Cricut machine, or any cutting tool.
        </p>
      </div>

      <!-- Filter Bar -->
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
        <div class="flex flex-wrap gap-4 items-center justify-between">
          <div class="flex flex-wrap gap-3">
            <select class="px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
              <option>All Categories</option>
              {categories.map((category: string) => (
                <option value={category}>{category}</option>
              ))}
            </select>
            <select class="px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
              <option>All Difficulties</option>
              <option value="beginner">Beginner</option>
              <option value="intermediate">Intermediate</option>
              <option value="advanced">Advanced</option>
            </select>
            <select class="px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
              <option>All Materials</option>
              {materials.map((material: string) => (
                <option value={material}>{material}</option>
              ))}
            </select>
          </div>
          <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-600 dark:text-gray-400">Sort by:</span>
            <select class="px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm">
              <option>Newest</option>
              <option>Most Popular</option>
              <option>Free First</option>
              <option>Difficulty</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Templates Grid -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
        {templates.map((template) => {
          const difficultyColors = {
            'beginner': 'from-green-100 to-green-200 dark:from-green-900 dark:to-green-800',
            'intermediate': 'from-orange-100 to-orange-200 dark:from-orange-900 dark:to-orange-800',
            'advanced': 'from-red-100 to-red-200 dark:from-red-900 dark:to-red-800'
          };
          
          const difficultyIconColors = {
            'beginner': 'text-green-500',
            'intermediate': 'text-orange-500',
            'advanced': 'text-red-500'
          };

          // Parse materials from JSON string
          let templateMaterials: string[] = [];
          try {
            templateMaterials = typeof template.materials === 'string' ? JSON.parse(template.materials) : [];
          } catch {
            templateMaterials = [];
          }

          return (
            <div class="card card-hover group cursor-pointer">
              <div class={`aspect-square bg-gradient-to-br ${difficultyColors[template.difficulty] || difficultyColors.intermediate} relative rounded-t-xl`}>
                <div class="absolute inset-4 bg-white dark:bg-gray-800 rounded-lg shadow-inner flex items-center justify-center">
                  {template.svg_data ? (
                    <div class="w-16 h-16 overflow-hidden" set:html={template.svg_data} />
                  ) : (
                    <svg class={`w-16 h-16 ${difficultyIconColors[template.difficulty] || difficultyIconColors.intermediate}`} fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2L2 7V10C2 16 6 20.5 12 22C18 20.5 22 16 22 10V7L12 2Z"/>
                    </svg>
                  )}
                </div>
                <div class={`absolute top-3 right-3 ${template.is_premium ? 'bg-yellow-500' : 'bg-green-500'} text-white px-2 py-1 rounded-full text-xs font-bold`}>
                  {template.is_premium ? 'PRO' : 'FREE'}
                </div>
                <div class="absolute bottom-3 left-3 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
                  {template.difficulty.charAt(0).toUpperCase() + template.difficulty.slice(1)}
                </div>
              </div>
              <div class="p-4">
                <h3 class="font-semibold text-gray-900 dark:text-white mb-2">{template.title}</h3>
                <p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">{template.description}</p>
                <div class="flex items-center justify-between mb-3">
                  <div class="flex flex-wrap gap-1">
                    {templateMaterials.slice(0, 2).map((material) => (
                      <span class="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">{material}</span>
                    ))}
                    {templateMaterials.length > 2 && (
                      <span class="text-xs text-gray-500">+{templateMaterials.length - 2}</span>
                    )}
                  </div>
                  <div class="text-xs text-gray-500">
                    {template.download_count} downloads
                  </div>
                </div>
                <div class="flex items-center justify-between">
                  <div class="text-xs text-gray-500">
                    {template.category}
                  </div>
                  <TemplateDownloadButton 
                    templateId={template.id}
                    templateTitle={template.title}
                    isPremium={template.is_premium}
                    className="text-sm px-4 py-2"
                    client:load
                  />
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <!-- CTA Section -->
      <div class="text-center bg-gradient-to-r from-primary-500 to-secondary-500 rounded-xl p-8 text-white">
        <h2 class="text-2xl font-bold mb-4">Can't Find What You Need?</h2>
        <p class="mb-6">Use our AI tools to create custom SVGs from your ideas</p>
        <a href="/tools" class="btn bg-white text-primary-500 hover:bg-gray-100">Try AI Tools</a>
      </div>
    </div>
  </main>

  <Footer />
</Layout>