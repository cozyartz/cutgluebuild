---
import Layout from '../../../layouts/Layout.astro';
import Header from '../../../components/Header.astro';
import { getDatabase, getAuthService, getSessionFromRequest } from '../../../lib/database';
import { SESSION_COOKIE_NAME } from '../../../lib/auth';
import type { Env, UserProject } from '../../../lib/database';

export async function getStaticPaths() {
  // Return empty array for static build - these pages will be generated server-side
  return [];
}

const { projectId } = Astro.params;

if (!projectId) {
  return Astro.redirect('/tools');
}

// Get session from cookies
const sessionId = getSessionFromRequest(Astro.request);
if (!sessionId) {
  return Astro.redirect('/login');
}

// Get services
const env = Astro.locals.runtime?.env as Env;
const authService = getAuthService(env);
const database = getDatabase(env);

// Verify user is authenticated
const currentUser = sessionId ? await authService.getCurrentUser(sessionId) : null;
if (!currentUser) {
  return Astro.redirect('/login');
}

// Fetch project from database to verify ownership
let project: UserProject | null = null;
try {
  project = await database.getUserProject(projectId, currentUser.id);
} catch (error) {
  console.error('Error fetching project:', error);
}

// If project not found or doesn't belong to user, redirect
if (!project) {
  return Astro.redirect('/tools');
}
---

<Layout title="Design Editor - CutGlueBuild.com" description="Edit and refine your designs with our powerful in-app editor.">
  <Header />
  
  <main class="pt-16 h-screen bg-gray-50 dark:bg-gray-900">
    <div id="editor-container" class="h-full">
      <!-- Editor will be mounted here -->
    </div>
  </main>
</Layout>

<script define:vars={{ project }}>
  import DesignEditor from '../../../components/tools/DesignEditor.tsx';
  import RevisionHistory from '../../../components/tools/RevisionHistory.tsx';
  import { createRoot } from 'react-dom/client';
  import React from 'react';
  import { Toaster } from 'react-hot-toast';

  const projectId = project.id;
  
  function EditorApp() {
    const [showHistory, setShowHistory] = React.useState(false);
    const [currentProject, setCurrentProject] = React.useState(null);

    React.useEffect(() => {
      // Set the project data from server-side props
      // Parse the canvas settings and metadata
      let parsedCanvasSettings = {};
      try {
        parsedCanvasSettings = project.canvas_settings ? JSON.parse(project.canvas_settings) : { width: 800, height: 600, backgroundColor: '#ffffff' };
      } catch {
        parsedCanvasSettings = { width: 800, height: 600, backgroundColor: '#ffffff' };
      }

      setCurrentProject({
        ...project,
        canvas_settings: parsedCanvasSettings
      });

      console.log('Loading project:', projectId, project);
    }, []);

    return React.createElement('div', { className: 'h-full flex' }, [
      React.createElement('div', { 
        key: 'editor',
        className: showHistory ? 'flex-1' : 'w-full' 
      }, [
        React.createElement(DesignEditor, {
          projectId: projectId,
          initialSvgData: currentProject?.svg_data,
          canvasSettings: currentProject?.canvas_settings,
          onSave: (svgData) => {
            console.log('Design saved:', svgData);
          }
        })
      ]),
      
      showHistory && React.createElement('div', {
        key: 'history',
        className: 'w-80 border-l border-gray-200 dark:border-gray-700'
      }, [
        React.createElement(RevisionHistory, {
          projectId: projectId,
          currentRevisionId: currentProject?.current_revision_id,
          onRevisionRestore: (revisionId) => {
            console.log('Revision restored:', revisionId);
            // Reload the editor with the restored revision
          }
        })
      ]),
      
      React.createElement('button', {
        key: 'toggle',
        onClick: () => setShowHistory(!showHistory),
        className: 'fixed top-20 right-4 z-10 btn btn-primary',
        children: showHistory ? 'Hide History' : 'Show History'
      }),
      
      React.createElement(Toaster, { key: 'toaster' })
    ]);
  }

  const container = document.getElementById('editor-container');
  if (container) {
    const root = createRoot(container);
    root.render(React.createElement(EditorApp));
  }
</script>

<style>
  /* Ensure full height */
  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }
</style>