---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
---

<Layout title="AI SVG Generator - CutGlueBuild.com" description="Generate laser-ready SVG files from text descriptions using AI. Perfect for Glowforge, Cricut, and other cutting machines.">
  <Header />
  
  <main class="pt-16 h-screen bg-gray-50 dark:bg-gray-900">
    <div class="h-full flex">
      <!-- Left Panel - Controls -->
      <div class="w-96 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col">
        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">AI SVG Generator</h1>
          <p class="text-gray-600 dark:text-gray-400 text-sm">Describe your design and get laser-ready SVG files</p>
        </div>
        
        <div class="flex-1 p-6 overflow-y-auto">
          <form id="svg-generator-form" class="space-y-6">
            <!-- Description Input -->
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Design Description
              </label>
              <textarea
                id="description"
                name="description"
                rows="4"
                placeholder="Describe your design... e.g., 'A geometric mandala pattern for laser cutting on wood'"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white resize-none"
                required
              ></textarea>
            </div>

            <!-- Material Selection -->
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Material
              </label>
              <select name="material" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white">
                <option value="wood">Wood</option>
                <option value="acrylic">Acrylic</option>
                <option value="cardboard">Cardboard</option>
                <option value="leather">Leather</option>
                <option value="fabric">Fabric</option>
                <option value="metal">Metal</option>
              </select>
            </div>

            <!-- Size Settings -->
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Width (mm)
                </label>
                <input
                  type="number"
                  name="width"
                  value="100"
                  min="10"
                  max="1000"
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Height (mm)
                </label>
                <input
                  type="number"
                  name="height"
                  value="100"
                  min="10"
                  max="1000"
                  class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>

            <!-- Style Options -->
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Style
              </label>
              <div class="grid grid-cols-2 gap-2">
                <label class="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                  <input type="radio" name="style" value="geometric" class="mr-2" checked />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Geometric</span>
                </label>
                <label class="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                  <input type="radio" name="style" value="organic" class="mr-2" />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Organic</span>
                </label>
                <label class="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                  <input type="radio" name="style" value="minimal" class="mr-2" />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Minimal</span>
                </label>
                <label class="flex items-center p-3 border border-gray-300 dark:border-gray-600 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                  <input type="radio" name="style" value="detailed" class="mr-2" />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Detailed</span>
                </label>
              </div>
            </div>

            <!-- Generate Button -->
            <button
              type="submit"
              class="w-full btn btn-primary py-3 text-base font-medium"
              id="generate-btn"
            >
              Generate SVG
            </button>
          </form>

          <!-- Recent Generations -->
          <div class="mt-8">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Recent Generations</h3>
            <div class="space-y-3">
              <div class="p-3 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                <div class="text-sm font-medium text-gray-900 dark:text-white">Geometric Mandala</div>
                <div class="text-xs text-gray-600 dark:text-gray-400">2 minutes ago</div>
              </div>
              <div class="p-3 border border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                <div class="text-sm font-medium text-gray-900 dark:text-white">Leaf Pattern</div>
                <div class="text-xs text-gray-600 dark:text-gray-400">1 hour ago</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Panel - Preview -->
      <div class="flex-1 flex flex-col">
        <!-- Toolbar -->
        <div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <button class="btn btn-outline text-sm" id="zoom-out">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
              </button>
              <span class="text-sm text-gray-600 dark:text-gray-400" id="zoom-level">100%</span>
              <button class="btn btn-outline text-sm" id="zoom-in">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
              </button>
            </div>
            
            <div class="flex items-center space-x-3">
              <button class="btn btn-outline text-sm" id="edit-btn" disabled>
                Edit Design
              </button>
              <button class="btn btn-primary text-sm" id="download-btn" disabled>
                Download SVG
              </button>
            </div>
          </div>
        </div>

        <!-- Canvas Area -->
        <div class="flex-1 bg-gray-100 dark:bg-gray-900 relative overflow-hidden">
          <div id="canvas-container" class="w-full h-full flex items-center justify-center">
            <div id="svg-preview" class="bg-white rounded-lg shadow-lg p-8 max-w-2xl max-h-2xl">
              <div class="text-center text-gray-400 dark:text-gray-600">
                <svg class="w-24 h-24 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v6a2 2 0 002 2h4a2 2 0 002-2V5z"></path>
                </svg>
                <p class="text-lg font-medium">No design generated yet</p>
                <p class="text-sm">Describe your design in the left panel to get started</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const form = document.getElementById('svg-generator-form');
  const generateBtn = document.getElementById('generate-btn');
  const editBtn = document.getElementById('edit-btn');
  const downloadBtn = document.getElementById('download-btn');
  const svgPreview = document.getElementById('svg-preview');
  
  let currentSvgData = null;

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const description = formData.get('description');
      const material = formData.get('material');
      const width = formData.get('width');
      const height = formData.get('height');
      const style = formData.get('style');

      // Update button state
      generateBtn.textContent = 'Generating...';
      generateBtn.disabled = true;

      try {
        // Simulate API call - replace with actual AI service
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Mock SVG generation
        const mockSvg = `
          <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
            <rect x="10" y="10" width="${width-20}" height="${height-20}" fill="none" stroke="#000" stroke-width="1"/>
            <circle cx="${width/2}" cy="${height/2}" r="${Math.min(width, height)/4}" fill="none" stroke="#000" stroke-width="1"/>
            <text x="${width/2}" y="${height/2}" text-anchor="middle" font-family="Arial" font-size="12" fill="#666">
              ${description.substring(0, 20)}...
            </text>
          </svg>
        `;
        
        currentSvgData = mockSvg;
        svgPreview.innerHTML = mockSvg;
        
        // Enable action buttons
        editBtn.disabled = false;
        downloadBtn.disabled = false;
        
      } catch (error) {
        console.error('Generation error:', error);
        alert('Failed to generate SVG. Please try again.');
      } finally {
        generateBtn.textContent = 'Generate SVG';
        generateBtn.disabled = false;
      }
    });
  }

  // Download functionality
  if (downloadBtn) {
    downloadBtn.addEventListener('click', () => {
      if (currentSvgData) {
        const blob = new Blob([currentSvgData], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'generated-design.svg';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    });
  }

  // Edit functionality
  if (editBtn) {
    editBtn.addEventListener('click', () => {
      if (currentSvgData) {
        // Save to project and redirect to editor
        const projectData = {
          title: 'Generated Design',
          svgData: currentSvgData,
          projectType: 'svg_generated'
        };
        
        // In a real app, this would save to the database
        localStorage.setItem('tempProject', JSON.stringify(projectData));
        window.location.href = '/tools/editor/temp';
      }
    });
  }

  // Zoom controls
  let zoomLevel = 100;
  const zoomInBtn = document.getElementById('zoom-in');
  const zoomOutBtn = document.getElementById('zoom-out');
  const zoomLevelSpan = document.getElementById('zoom-level');

  if (zoomInBtn) {
    zoomInBtn.addEventListener('click', () => {
      zoomLevel = Math.min(zoomLevel + 25, 200);
      updateZoom();
    });
  }

  if (zoomOutBtn) {
    zoomOutBtn.addEventListener('click', () => {
      zoomLevel = Math.max(zoomLevel - 25, 25);
      updateZoom();
    });
  }

  function updateZoom() {
    const container = document.getElementById('svg-preview');
    if (container) {
      container.style.transform = `scale(${zoomLevel / 100})`;
      zoomLevelSpan.textContent = `${zoomLevel}%`;
    }
  }
</script>

<style>
  #svg-preview {
    transition: transform 0.2s ease;
    transform-origin: center;
  }
</style>