import type { APIRoute } from 'astro';\nimport type { Env } from '../../../lib/database';\nimport { createAIService } from '../../../lib/cloudflare-ai';\nimport { getAuthService, getSessionFromRequest } from '../../../lib/auth';\n\nexport const POST: APIRoute = async ({ request, locals }) => {\n  const env = (locals as any)?.runtime?.env as Env;\n  if (!env) {\n    return new Response(JSON.stringify({ error: 'Environment not available' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Get authenticated user\n  const sessionId = getSessionFromRequest(request);\n  if (!sessionId) {\n    return new Response(JSON.stringify({ error: 'Authentication required' }), {\n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  const authService = getAuthService(env);\n  const currentUser = await authService.getCurrentUser(sessionId);\n  if (!currentUser) {\n    return new Response(JSON.stringify({ error: 'Authentication required' }), {\n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  try {\n    const body = await request.json();\n    const { material, thickness, machine } = body;\n\n    if (!material || !thickness || !machine) {\n      return new Response(JSON.stringify({ \n        error: 'Material, thickness, and machine are required',\n        supportedMachines: ['glowforge', 'shaper'],\n        example: {\n          material: 'plywood',\n          thickness: 6,\n          machine: 'glowforge'\n        }\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    if (!['glowforge', 'shaper'].includes(machine)) {\n      return new Response(JSON.stringify({ \n        error: 'Unsupported machine type',\n        supportedMachines: ['glowforge', 'shaper']\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const aiService = createAIService(env);\n\n    try {\n      const settings = await (aiService as any).generateMaterialSettings(material, thickness, machine);\n      \n      return new Response(JSON.stringify({ \n        ...settings,\n        material,\n        thickness,\n        machine,\n        message: `Optimized ${machine} settings for ${thickness}mm ${material}`\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (aiError) {\n      console.error('Material settings generation error:', aiError);\n      \n      return new Response(JSON.stringify({ \n        error: 'Failed to generate material settings',\n        details: aiError.message \n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  } catch (error) {\n    console.error('Material settings API error:', error);\n    return new Response(JSON.stringify({ \n      error: 'Invalid request format',\n      details: error.message \n    }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n};\n"