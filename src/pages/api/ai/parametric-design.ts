import type { APIRoute } from 'astro';\nimport type { Env } from '../../../lib/database';\nimport { createAIService } from '../../../lib/cloudflare-ai';\nimport { withUsageCheck } from '../../../lib/usage-tracking';\nimport { getAuthService, getSessionFromRequest } from '../../../lib/auth';\n\nexport const POST: APIRoute = async ({ request, locals }) => {\n  const env = (locals as any)?.runtime?.env as Env;\n  if (!env) {\n    return new Response(JSON.stringify({ error: 'Environment not available' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Get authenticated user\n  const sessionId = getSessionFromRequest(request);\n  if (!sessionId) {\n    return new Response(JSON.stringify({ error: 'Authentication required' }), {\n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  const authService = getAuthService(env);\n  const currentUser = await authService.getCurrentUser(sessionId);\n  if (!currentUser) {\n    return new Response(JSON.stringify({ error: 'Authentication required' }), {\n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  return withUsageCheck(env, currentUser.id, 'ai_generation', async () => {\n    const body = await request.json();\n    const { type, dimensions, material, style } = body;\n\n    if (!type || !dimensions || !material) {\n      return new Response(JSON.stringify({ \n        error: 'Type, dimensions, and material are required',\n        example: {\n          type: 'box',\n          dimensions: { width: 100, height: 50, depth: 30, thickness: 3 },\n          material: 'plywood',\n          style: 'modern'\n        }\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const aiService = createAIService(env);\n\n    try {\n      const result = await (aiService as any).generateParametricDesign({\n        type,\n        dimensions,\n        material,\n        style\n      });\n      \n      return new Response(JSON.stringify({ \n        ...result,\n        message: `Parametric ${type} design generated with customizable script`\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (aiError) {\n      console.error('Parametric design generation error:', aiError);\n      \n      return new Response(JSON.stringify({ \n        error: 'Failed to generate parametric design',\n        details: aiError.message \n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  });\n};\n"