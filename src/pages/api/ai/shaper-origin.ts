import type { APIRoute } from 'astro';\nimport type { Env } from '../../../lib/database';\nimport { createAIService } from '../../../lib/cloudflare-ai';\nimport { withUsageCheck } from '../../../lib/usage-tracking';\nimport { getAuthService, getSessionFromRequest } from '../../../lib/auth';\n\nexport const POST: APIRoute = async ({ request, locals }) => {\n  const env = (locals as any)?.runtime?.env as Env;\n  if (!env) {\n    return new Response(JSON.stringify({ error: 'Environment not available' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Get authenticated user\n  const sessionId = getSessionFromRequest(request);\n  if (!sessionId) {\n    return new Response(JSON.stringify({ error: 'Authentication required' }), {\n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  const authService = getAuthService(env);\n  const currentUser = await authService.getCurrentUser(sessionId);\n  if (!currentUser) {\n    return new Response(JSON.stringify({ error: 'Authentication required' }), {\n      status: 401,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  return withUsageCheck(env, currentUser.id, 'ai_generation', async () => {\n    const body = await request.json();\n    const { svgData, toolDiameter = 3.175 } = body;\n\n    if (!svgData) {\n      return new Response(JSON.stringify({ error: 'SVG data is required' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const aiService = createAIService(env);\n\n    try {\n      const shaperSVG = await (aiService as any).generateShaperOriginSVG(svgData, toolDiameter);\n      \n      return new Response(JSON.stringify({ \n        shaperSVG,\n        toolDiameter,\n        message: 'SVG optimized for Shaper Origin CNC router'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    } catch (aiError) {\n      console.error('Shaper Origin conversion error:', aiError);\n      \n      return new Response(JSON.stringify({ \n        error: 'Failed to convert SVG for Shaper Origin',\n        details: aiError.message \n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  });\n};\n"